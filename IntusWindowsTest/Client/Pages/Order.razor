@page "/order"
@page "/order/{id:int}"
@inject IOrderService OrderService
@inject IStateService StateService
@inject NavigationManager NavigationManager

@if (Id is null)
{
    <PageTitle>Create a new Order</PageTitle>
    <h3>Create a new Order</h3>
}
else
{
    <PageTitle>Edit @order?.Name</PageTitle>
    <h3>Edit @order?.Name</h3>
}

<EditForm Model="order" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="order.Name" class="form-control" />
    </div>
    <div>
        <label for="state">State</label>
        <InputSelect id="state" class="form-control" placeholder="State" @bind-Value="order.State.Id">
            @foreach (var state in states)
            {
                <option value="@state.Id">
                    @state.Code
                </option>
            }
        </InputSelect>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>

</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    DAL.Entities.Order? order = new DAL.Entities.Order { Name = "New order", State = new DAL.Entities.State()};

    List<DAL.Entities.State> states = new List<DAL.Entities.State>();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save New Order" : "Update Order";
        await StateService.GetStates();
        states = StateService.States;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await OrderService.GetOrderById((int)Id);
            if (result is not null)
                order = result;
            else
                NavigationManager.NavigateTo("/order");
        }
    }

    async Task HandleSubmit()
    {
        if (Id is null)
        {
            await OrderService.CreateOrder(order);
        }
        else
        {
            await OrderService.UpdateOrder((int)Id, order);
        }
    }
}
