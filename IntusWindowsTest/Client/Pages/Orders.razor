@page "/"
@page "/orders"
@page "/orders/{orderId:int}"
@page "/orders/{orderId:int}/window/{windowId:int}"
@page "/orders/{orderId:int}/window/{windowId:int}/subelement/{subElementId:int}"
@inject IOrderService OrderService
@inject IWindowService WindowService
@inject NavigationManager NavigationManager
@inject ISubElementService SubElementService

<div class="container" style="min-width:100%;">
    <div class="row">
        <div class="col">
            <h4>Orders</h4>

            <table class="table table-sm">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>State</th>
                        <th style="min-width: 100px;">
                            <button class="btn btn-primary"
                                    @onclick="CreateOrder">
                                @* Create order *@
                                <i class="oi oi-plus"></i>
                            </button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in OrderService.Orders)
                    {
                        string colorClass = (order == SelectedOrder) ? "bg-info" : "";
                        <tr class="@colorClass" style="cursor:pointer" 
                            @onclick="async () => { SelectedOrder = order; await RefreshWindowsByOrderId(order.Id);}">
                            <td>@order.Name</td>
                            <td>@order.State.Code</td>
                            <td>
                                <button class="btn btn-primary"
                                        @onclick="(() => ShowOrder(order.Id))">
                                    <i class="oi oi-pencil"></i>
                                </button>
                                <button class="btn btn-danger"
                                        @onclick="(() => DeleteOrder(order.Id))">
                                    <i class="oi oi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
        <div class="col">
            <h4>Windows</h4>

            <table class="table table-sm">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Quantity of windows</th>
                        <th>Total sub elements</th>
                        <th style="min-width: 100px;">
                            @if (SelectedOrder.Id > 0)
                            {
                                <button class="btn btn-primary"
                                        @onclick="(() => CreateWindow(SelectedOrder.Id))">
                                    @* Create window *@
                                    <i class="oi oi-plus"></i>
                                </button>
                            }
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var window in WindowService.Windows)
                    {
                        string colorClass = (window == SelectedWindow) ? "bg-info" : "";
                        <tr class="@colorClass" style="cursor:pointer" @onclick="() => { SelectedWindow = window; }">
                            <td>@window.Name</td>
                            <td>@window.QuantityOfWindows</td>
                            <td>@window.SubElements.Count()</td>
                            <td>
                                <button class="btn btn-primary"
                                        @onclick="(() => EditWindow(window.Order.Id, window.Id))">
                                    <i class="oi oi-pencil"></i>
                                </button>
                                <button class="btn btn-danger"
                                        @onclick="(() => DeleteWindow(window.Order.Id, window.Id))">
                                    <i class="oi oi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
        <div class="col">
            <h4>Sub elements</h4>

            <table class="table table-sm">
                <thead>
                    <tr>
                        <th>Element</th>
                        <th>Type</th>
                        <th>Width</th>
                        <th>Height</th>
                        <th style="min-width: 100px;">
                            @if (SelectedWindow.Id > 0)
                            {
                                <button class="btn btn-primary"
                                        @onclick="(() => CreateSubElement(SelectedOrder.Id, SelectedWindow.Id))" >
                                    <i class="oi oi-plus"></i>
                                </button>
                            }
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var subElement in SelectedWindow.SubElements)
                    {
                        string colorClass = (subElement == SelectedSubElement) ? "bg-info" : "";
                        <tr class="@colorClass" style="cursor:pointer" @onclick="() => { SelectedSubElement = subElement; }">
                            <td>@subElement.Element</td>
                            <td>@subElement.ElementType?.Code</td>
                            <td>@subElement.Width</td>
                            <td>@subElement.Height</td>
                            <td>
                                <button class="btn btn-primary"
                                        @onclick="(() => EditSubElement(subElement))">
                                    <i class="oi oi-pencil"></i>
                                </button>
                                <button class="btn btn-danger"
                                        @onclick="(() => DeleteSubElement(subElement))">
                                    <i class="oi oi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? orderId { get; set; }

    [Parameter]
    public int? windowId { get; set; }

    [Parameter]
    public int? subElementId { get; set; }

    DAL.Entities.Order SelectedOrder = new DAL.Entities.Order();
    DAL.Entities.Window SelectedWindow = new DAL.Entities.Window();
    DAL.Entities.SubElement SelectedSubElement = new DAL.Entities.SubElement();

    protected override async Task OnInitializedAsync()
    {
        await OrderService.GetOrders();
    }

    protected override async Task OnParametersSetAsync()
    {
        await SetPositions();
    }

    async Task SetPositions()
    {
        if (orderId != null)
        {
            SelectedOrder = OrderService.Orders.FirstOrDefault(o => o.Id == orderId) ?? new DAL.Entities.Order();
            await RefreshWindowsByOrderId((int)orderId);
        }
        else
        {
            SelectedOrder = OrderService.Orders.FirstOrDefault() ?? new DAL.Entities.Order();
            await RefreshWindowsByOrderId(SelectedOrder.Id);
        }

        if (windowId != null)
        {
            SelectedWindow = WindowService.Windows.FirstOrDefault(w => w.Id == windowId) ?? new DAL.Entities.Window();
        }

        if (subElementId != null)
        {
            SelectedSubElement = SelectedWindow.SubElements.FirstOrDefault(s => s.Id == subElementId) ?? new DAL.Entities.SubElement();
        }
    }

    void ShowOrder(int id)
    {
        NavigationManager.NavigateTo($"order/{id}");
    }

    void CreateOrder()
    {
        NavigationManager.NavigateTo("/order");
    }

    async Task DeleteOrder(int id)
    {
        await OrderService.DeleteOrder(id);
    }

    async Task RefreshWindowsByOrderId (int orderId)
    {
        await WindowService.GetWindowsByOrderId(orderId);
        SelectedWindow = WindowService.Windows.FirstOrDefault() ?? new DAL.Entities.Window();
    }

    void CreateWindow(int orderId)
    {
        NavigationManager.NavigateTo($"/order/{orderId}/window/");
    }

    void EditWindow(int orderId, int windowId)
    {
        NavigationManager.NavigateTo($"/order/{orderId}/window/{windowId}");
    }

    async Task DeleteWindow(int orderId, int windowId)
    {
        await WindowService.DeleteWindow(orderId, windowId);
        SelectedWindow = new DAL.Entities.Window();
    }

    void CreateSubElement(int orderId, int windowId)
    {
        NavigationManager.NavigateTo($"/order/{orderId}/window/{windowId}/subelement/");
    }

    async Task DeleteSubElement(DAL.Entities.SubElement subElement)
    {
        await SubElementService.DeleteSubElement(SelectedOrder.Id, SelectedWindow.Id, subElement);
    }

    async void EditSubElement(DAL.Entities.SubElement subElement)
    {
        NavigationManager.NavigateTo($"/order/{SelectedOrder.Id}/window/{SelectedWindow.Id}/subelement/{subElement.Id}");
    }
}